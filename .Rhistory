# Run the Shiny app
shinyApp(ui = ui, server = server)
library(quantmod)
library(shiny)
library(prophet)
library(tidyverse)
library(dygraphs)
library(xts)
# Read in the stock prices for AAPL
getSymbols("AAPL")
aapl <- as.data.frame(AAPL)
aapl.head()
aapl <- rownames_to_column(aapl, "date")
# Select the necessary columns and rename them
aapl <- aapl %>% select(date, AAPL.Adjusted) %>% rename(y = AAPL.Adjusted, ds = date)
aapl$ds <- as.Date(aapl$ds)
# Fit a model to the stock price data
m <- prophet(aapl)
# Forecast the stock price 6 months into the future
future <- make_future_dataframe(m, periods = 180)
forecast <- predict(m, future)
ui <- fluidPage(
# Add a slider input widget
sliderInput("window", "Time Period:",
min = 1, max = length(aapl$y), value = c(1, length(aapl$y)), step = 1),
# Add a dygraphs plot
dygraphOutput("plot")
)
server <- function(input, output) {
# Reactive expression to create a subset of the data based on the slider input
stock_subset <- reactive({
aapl2 <- aapl[input$window[1]:input$window[2],]
# https://stackoverflow.com/questions/4297231/converting-a-data-frame-to-xts
forecast_subset <- forecast %>% select(ds, y=yhat) %>%
filter(ds >= "2022-12-15")
aapl2 <- bind_rows(aapl2, forecast_subset)
aapl2$ds <- as.Date(aapl2$ds)
aapl2$indicator <- ifelse(aapl2$ds > max(aapl$ds), 1, 0)
aapl2 <- as.xts(aapl2[, -1], aapl2[, 1])
return(aapl2)
})
# Render the dygraphs plot
output$plot <- renderDygraph({
dygraph(aapl2, main = "AAPL Stock Price", group='indicator') %>%
# dySeries(color = c("darkblue", "red"))
dyRangeSelector()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# Define the server function
server <- function(input, output) {
# Reactive expression to create a subset of the data based on the slider input
stock_subset <- reactive({
aapl2 <- aapl[input$window[1]:input$window[2], ]
forecast_subset <- forecast %>% select(ds, y = yhat) %>%
filter(ds >= "2022-12-15")
aapl2 <- bind_rows(aapl2, forecast_subset)
aapl2$ds <- as.Date(aapl2$ds)
aapl2$indicator <- ifelse(aapl2$ds > max(aapl$ds), 1, 0)
aapl2 <- as.xts(aapl2[, -1], aapl2[, 1])
return(aapl2)
})
# Render the dygraphs plot
output$plot <- renderDygraph({
aapl2 <- stock_subset()  # Retrieve the subset from the reactive expression
dygraph(aapl2, main = "AAPL Stock Price", group = 'indicator') %>%
dyRangeSelector()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(lubridate)
# Define the user interface
ui <- fluidPage(
# Add a slider input widget
sliderInput("window", "Time Period:",
min = min(year(aapl$ds)), max = max(year(aapl$ds)),
value = c(min(year(aapl$ds)), max(year(aapl$ds))),
step = 1),
# Add a dygraphs plot
dygraphOutput("plot")
)
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Add a slider input widget
sliderInput("window", "Time Period:",
min = min(year(aapl$ds)), max = max(year(aapl$ds)),
value = c(min(year(aapl$ds)), max(year(aapl$ds))),
step = 1),
# Add a dygraphs plot
dygraphOutput("plot")
)
server <- function(input, output) {
# Reactive expression to create a subset of the data based on the slider input
stock_subset <- reactive({
aapl2 <- aapl[input$window[1]:input$window[2], ]
forecast_subset <- forecast %>% select(ds, y = yhat) %>%
filter(ds >= "2022-12-15")
aapl2 <- bind_rows(aapl2, forecast_subset)
aapl2$ds <- as.Date(aapl2$ds)
aapl2$indicator <- ifelse(aapl2$ds > max(aapl$ds), 1, 0)
aapl2 <- as.xts(aapl2[, -1], aapl2[, 1])
return(aapl2)
})
# Render the dygraphs plot
output$plot <- renderDygraph({
aapl2 <- stock_subset()  # Retrieve the subset from the reactive expression
dygraph(aapl2, main = "AAPL Stock Price", group = 'indicator') %>%
dyRangeSelector()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Add a slider input widget
sliderInput("window", "Time Period:",
min = 1, max = length(aapl$y), value = c(1, length(aapl$y)), step = 1),
# Add a dygraphs plot
dygraphOutput("plot")
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Reactive expression to create a subset of the data based on the slider input
# Reactive expression to create a subset of the data based on the slider input
stock_subset <- reactive({
aapl2 <- aapl[aapl$ds >= input$window[1] & aapl$ds <= input$window[2], ]
forecast_subset <- forecast %>% select(ds, y = yhat) %>%
filter(ds >= "2022-12-15")
aapl2 <- bind_rows(aapl2, forecast_subset)
aapl2$ds <- as.Date(aapl2$ds)
aapl2$indicator <- ifelse(aapl2$ds > max(aapl$ds), 1, 0)
aapl2 <- as.xts(aapl2[, -1], aapl2[, 1])
return(aapl2)
})
# Render the dygraphs plot
output$plot <- renderDygraph({
aapl2 <- stock_subset()  # Retrieve the subset from the reactive expression
dygraph(aapl2, main = "AAPL Stock Price", group = 'indicator') %>%
dyRangeSelector()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# Define the user interface
ui <- fluidPage(
# Add a slider input widget
sliderInput("window", "Time Period:",
min = min(year(aapl$ds)), max = max(year(aapl$ds)),
value = c(min(year(aapl$ds)), max(year(aapl$ds))),
step = 1),
# Add a dygraphs plot
dygraphOutput("plot")
)
server <- function(input, output) {
# Reactive expression to create a subset of the data based on the slider input
# Reactive expression to create a subset of the data based on the slider input
stock_subset <- reactive({
aapl2 <- aapl[aapl$ds >= input$window[1] & aapl$ds <= input$window[2], ]
forecast_subset <- forecast %>% select(ds, y = yhat) %>%
filter(ds >= "2022-12-15")
aapl2 <- bind_rows(aapl2, forecast_subset)
aapl2$ds <- as.Date(aapl2$ds)
aapl2$indicator <- ifelse(aapl2$ds > max(aapl$ds), 1, 0)
aapl2 <- as.xts(aapl2[, -1], aapl2[, 1])
return(aapl2)
})
# Render the dygraphs plot
output$plot <- renderDygraph({
aapl2 <- stock_subset()  # Retrieve the subset from the reactive expression
dygraph(aapl2, main = "AAPL Stock Price", group = 'indicator') %>%
dyRangeSelector()
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Reactive expression to create a subset of the data based on the slider input
# Reactive expression to create a subset of the data based on the slider input
stock_subset <- reactive({
aapl2 <- aapl[aapl$ds >= input$window[1] & aapl$ds <= input$window[2], ]
forecast_subset <- forecast %>% select(ds, y = yhat) %>%
filter(ds >= "2007-12-15")
aapl2 <- bind_rows(aapl2, forecast_subset)
aapl2$ds <- as.Date(aapl2$ds)
aapl2$indicator <- ifelse(aapl2$ds > max(aapl$ds), 1, 0)
aapl2 <- as.xts(aapl2[, -1], aapl2[, 1])
return(aapl2)
})
# Render the dygraphs plot
output$plot <- renderDygraph({
aapl2 <- stock_subset()  # Retrieve the subset from the reactive expression
dygraph(aapl2, main = "AAPL Stock Price", group = 'indicator') %>%
dyRangeSelector()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Add a slider input widget
sliderInput("window", "Time Period:",
min = 1, max = length(aapl$y), value = c(1, length(aapl$y)), step = 1),
# Add a dygraphs plot
dygraphOutput("plot")
)
server <- function(input, output) {
# Reactive expression to create a subset of the data based on the slider input
stock_subset <- reactive({
aapl2 <- aapl[input$window[1]:input$window[2], ]
forecast_subset <- forecast %>% select(ds, y = yhat) %>%
filter(ds >= "2022-12-15")
aapl2 <- bind_rows(aapl2, forecast_subset)
aapl2$ds <- as.Date(aapl2$ds)
aapl2$indicator <- ifelse(aapl2$ds > max(aapl$ds), 1, 0)
aapl2 <- as.xts(aapl2[, -1], aapl2[, 1])
return(aapl2)
})
# Render the dygraphs plot
output$plot <- renderDygraph({
aapl2 <- stock_subset()  # Retrieve the subset from the reactive expression
dygraph(aapl2, main = "AAPL Stock Price", group = 'indicator') %>%
dyRangeSelector()
})
}
shinyApp(ui = ui, server = server)
future <- make_future_dataframe(m, periods = 180)
forecast <- predict(m, future)
ui <- fluidPage(
# Add a slider input widget
sliderInput("window", "Time Period:",
min = min(year(aapl$ds)), max = max(year(aapl$ds)),
value = c(min(year(aapl$ds)), max(year(aapl$ds)))), step = 1),
# Add a dygraphs plot
dygraphOutput("plot")
)
ui <- fluidPage(
# Add a slider input widget
sliderInput("window", "Time Period:",
min = min(year(aapl$ds)), max = max(year(aapl$ds)),
value = c(min(year(aapl$ds)), max(year(aapl$ds)))), step = 1)
# Add a dygraphs plot
dygraphOutput("plot")
)
ui <- fluidPage(
# Add a slider input widget
sliderInput("window", "Time Period:",
min = min(year(aapl$ds)), max = max(year(aapl$ds)),
value = c(min(year(aapl$ds)), max(year(aapl$ds))), step = 1),
# Add a dygraphs plot
dygraphOutput("plot")
)
server <- function(input, output) {
# Reactive expression to create a subset of the data based on the slider input
stock_subset <- reactive({
aapl2 <- aapl[year(aapl$ds) >= input$window[1] & year(aapl$ds) <= input$window[2], ]
forecast_subset <- forecast %>% select(ds, y = yhat) %>%
filter(ds >= "2022-12-15")
aapl2 <- bind_rows(aapl2, forecast_subset)
aapl2$ds <- as.Date(aapl2$ds)
aapl2$indicator <- ifelse(aapl2$ds > max(aapl$ds), 1, 0)
aapl2 <- as.xts(aapl2[, -1], aapl2[, 1])
return(aapl2)
})
# Render the dygraphs plot
output$plot <- renderDygraph({
aapl2 <- stock_subset()  # Retrieve the subset from the reactive expression
dygraph(aapl2, main = "AAPL Stock Price", group = 'indicator') %>%
dyRangeSelector() %>%
dySeries("yhat", label = "Forecasted", color = "red")
})
}
shinyApp(ui = ui, server = server)
# Render the dygraphs plot
output$plot <- renderDygraph({
aapl2 <- stock_subset()  # Retrieve the subset from the reactive expression
dygraph(aapl2, main = "AAPL Stock Price") %>%
dyRangeSelector() %>%
dySeries("y", label = "AAPL Stock Price") %>%
dySeries("indicator", label = "Forecasted", color = "red")
})
server <- function(input, output) {
# Reactive expression to create a subset of the data based on the slider input
stock_subset <- reactive({
aapl2 <- aapl[input$window[1]:input$window[2], ]
forecast_subset <- forecast %>% select(ds, y = yhat) %>%
filter(ds >= "2022-12-15")
aapl2 <- bind_rows(aapl2, forecast_subset)
aapl2$ds <- as.Date(aapl2$ds)
aapl2$indicator <- ifelse(aapl2$ds > max(aapl$ds), 1, 0)
aapl2 <- as.xts(aapl2[, -1], aapl2[, 1])
return(aapl2)
})
# Render the dygraphs plot
output$plot <- renderDygraph({
aapl2 <- stock_subset()  # Retrieve the subset from the reactive expression
dygraph(aapl2, main = "AAPL Stock Price") %>%
dyRangeSelector() %>%
dySeries("y", label = "AAPL Stock Price") %>%
dySeries("indicator", label = "Forecasted", color = "red")
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Reactive expression to create a subset of the data based on the slider input
stock_subset <- reactive({
aapl2 <- aapl[input$window[1]:input$window[2], ]
forecast_subset <- forecast %>% select(ds, y = yhat) %>%
filter(ds >= "2009-12-15")
aapl2 <- bind_rows(aapl2, forecast_subset)
aapl2$ds <- as.Date(aapl2$ds)
aapl2$indicator <- ifelse(aapl2$ds > max(aapl$ds), 1, 0)
aapl2 <- as.xts(aapl2[, -1], aapl2[, 1])
return(aapl2)
})
# Render the dygraphs plot
output$plot <- renderDygraph({
aapl2 <- stock_subset()  # Retrieve the subset from the reactive expression
dygraph(aapl2, main = "AAPL Stock Price") %>%
dyRangeSelector() %>%
dySeries("y", label = "AAPL Stock Price") %>%
dySeries("indicator", label = "Forecasted", color = "red")
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Add a slider input widget
sliderInput("window", "Time Period:",
min = 1, max = length(aapl$y), value = c(1, length(aapl$y)), step = 1),
# Add a dygraphs plot
dygraphOutput("plot")
)
# Define the server function
server <- function(input, output) {
# Reactive expression to create a subset of the data based on the slider input
stock_subset <- reactive({
aapl[input$window[1]:input$window[2],]
})
# Render the dygraphs plot
output$plot <- renderDygraph({
dygraph(stock_subset(), main = "AAPL Stock Price") %>%
dyRangeSelector()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
getSymbols("AAPL")
aapl <- as.data.frame(AAPL)
aapl <- aapl %>% select(date, Adj) %>% rename(y = Adj, ds = date)
ui <- fluidPage(
# Add a slider input widget
sliderInput("window", "Time Period:",
min = 1, max = length(aapl$y), value = c(1, length(aapl$y)), step = 1),
# Add a dygraphs plot
dygraphOutput("plot")
)
# Define the server function
server <- function(input, output) {
# Reactive expression to create a subset of the data based on the slider input
stock_subset <- reactive({
aapl2 <- aapl[input$window[1]:input$window[2],]
# https://stackoverflow.com/questions/4297231/converting-a-data-frame-to-xts
#
forecast_subset <- forecast %>% select(ds, y=yhat) %>%
filter(ds >= "2022-12-15")
aapl2 <- bind_rows(aapl2, forecast_subset)
aapl2$ds <- as.Date(aapl2$ds)
aapl2$indicator <- ifelse(aapl2$ds > max(aapl$ds), 1, 0)
aapl2 <- as.xts(aapl2[, -1], aapl2[, 1])
return(aapl2)
})
# Render the dygraphs plot
output$plot <- renderDygraph({
dygraph(aapl2, main = "AAPL Stock Price", group='indicator') %>%
# dySeries(color = c("darkblue", "red"))
dyRangeSelector()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Reactive expression to create a subset of the data based on the slider input
stock_subset <- reactive({
aapl2 <- aapl[input$window[1]:input$window[2], ]
forecast_subset <- forecast %>% select(ds, y = yhat) %>%
filter(ds >= "2022-12-15")
aapl2 <- bind_rows(aapl2, forecast_subset)
aapl2$ds <- as.Date(aapl2$ds)
aapl2$indicator <- ifelse(aapl2$ds > max(aapl$ds), 1, 0)
aapl2 <- as.xts(aapl2[, -1], aapl2[, 1])
return(aapl2)
})
# Render the dygraphs plot
output$plot <- renderDygraph({
aapl2 <- stock_subset()  # Retrieve the subset from the reactive expression
dygraph(aapl2, main = "AAPL Stock Price", group = 'indicator') %>%
dyRangeSelector()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Add a slider input widget
sliderInput("window", "Time Period:",
min = 1, max = length(aapl$y), value = c(1, length(aapl$y)), step = 1),
# Add a dygraphs plot
dygraphOutput("plot")
)
ui <- fluidPage(
# Add a slider input widget
sliderInput("window", "Time Period:",
min = 1, max = length(aapl$y), value = c(1, length(aapl$y)), step = 1),
# Add a dygraphs plot
dygraphOutput("plot")
)
# Define the user interface
ui <- fluidPage(
# Add a slider input widget
sliderInput("window", "Time Period:",
min = 1, max = length(aapl$y), value = c(1, length(aapl$y)), step = 1),
# Add a dygraphs plot
dygraphOutput("plot")
)
getSymbols("AAPL")
aapl <- as.data.frame(AAPL)
# Convert the rowname (date information) into a column
aapl <- rownames_to_column(aapl, "date")
# Select the necessary columns and rename them
aapl <- aapl %>% select(date, AAPL.Adjusted) %>% rename(y = AAPL.Adjusted, ds = date)
aapl$ds <- as.Date(aapl$ds)
# Fit a model to the stock price data
m <- prophet(aapl)
# Forecast the stock price 6 months into the future
future <- make_future_dataframe(m, periods = 180)
forecast <- predict(m, future)
ui <- fluidPage(
# Add a slider input widget
sliderInput("window", "Time Period:",
min = 1, max = length(aapl$y), value = c(1, length(aapl$y)), step = 1),
# Add a dygraphs plot
dygraphOutput("plot")
)
# Define the server function
server <- function(input, output) {
# Reactive expression to create a subset of the data based on the slider input
stock_subset <- reactive({
aapl2 <- aapl[input$window[1]:input$window[2], ]
forecast_subset <- forecast %>% select(ds, y = yhat) %>%
filter(ds >= "2022-12-15")
aapl2 <- bind_rows(aapl2, forecast_subset)
aapl2$ds <- as.Date(aapl2$ds)
aapl2$indicator <- ifelse(aapl2$ds > max(aapl$ds), 1, 0)
aapl2 <- as.xts(aapl2[, -1], aapl2[, 1])
return(aapl2)
})
# Render the dygraphs plot
output$plot <- renderDygraph({
aapl2 <- stock_subset()  # Retrieve the subset from the reactive expression
dygraph(aapl2, main = "AAPL Stock Price", group = 'indicator') %>%
dyRangeSelector()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
library(quantmod)
library(shiny)
library(prophet)
library(tidyverse)
library(dygraphs)
library(xts)
library(lubridate)
# Read in the stock prices for AAPL
getSymbols("AAPL")
aapl <- as.data.frame(AAPL)
# Convert the rowname (date information) into a column
aapl <- rownames_to_column(aapl, "date")
# Select the necessary columns and rename them
aapl <- aapl %>% select(date, AAPL.Adjusted) %>% rename(y = AAPL.Adjusted, ds = date)
aapl$ds <- as.Date(aapl$ds)
# Fit a model to the stock price data
m <- prophet(aapl)
# Forecast the stock price 6 months into the future
future <- make_future_dataframe(m, periods = 180)
forecast <- predict(m, future)
# Define the user interface
ui <- fluidPage(
# Add a slider input widget
sliderInput("window", "Time Period:",
min = 1, max = length(aapl$y), value = c(1, length(aapl$y)), step = 1),
# Add a dygraphs plot
dygraphOutput("plot")
)
# Define the server function
server <- function(input, output) {
# Reactive expression to create a subset of the data based on the slider input
stock_subset <- reactive({
aapl2 <- aapl[input$window[1]:input$window[2], ]
forecast_subset <- forecast %>% select(ds, y = yhat) %>%
filter(ds >= "2022-12-15")
aapl2 <- bind_rows(aapl2, forecast_subset)
aapl2$ds <- as.Date(aapl2$ds)
aapl2$indicator <- ifelse(aapl2$ds > max(aapl$ds), 1, 0)
aapl2 <- as.xts(aapl2[, -1], aapl2[, 1])
return(aapl2)
})
# Render the dygraphs plot
output$plot <- renderDygraph({
aapl2 <- stock_subset()  # Retrieve the subset from the reactive expression
dygraph(aapl2, main = "AAPL Stock Price", group = 'indicator') %>%
dyRangeSelector()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
